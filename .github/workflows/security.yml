name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run npm audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level=moderate
        
    - name: Check for high/critical vulnerabilities
      run: |
        echo "Checking for high/critical vulnerabilities..."
        AUDIT_RESULT=$(npm audit --audit-level=high --json || true)
        HIGH_VULNS=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.critical // 0')
        
        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        
        if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ High or critical vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0, LGPL-2.1, LGPL-3.0
        
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check license compatibility
      run: |
        echo "Checking license compatibility..."
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;WTFPL;CC0-1.0;Python-2.0;BlueOak-1.0.0' --excludePrivatePackages
        echo "✅ All licenses are compatible"

  mock-validation:
    name: Mock Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Validate mock completeness
      run: |
        echo "Validating foundry-mocks completeness..."
        node -e "
          const fs = require('fs');
          const content = fs.readFileSync('mocks/foundry-mocks.ts', 'utf8');
          
          // Essential mock objects that should be present
          const requiredMocks = [
            'MockScene',
            'MockActor', 
            'MockItem',
            'MockUser',
            'MockApplication'
          ];
          
          let missing = [];
          for (const mock of requiredMocks) {
            if (!content.includes(mock)) {
              missing.push(mock);
            }
          }
          
          if (missing.length > 0) {
            console.error('❌ Missing essential mocks:', missing.join(', '));
            process.exit(1);
          } else {
            console.log('✅ All essential mocks are present');
          }
          
          // Check for ApplicationV2 support
          if (!content.includes('ApplicationV2')) {
            console.warn('⚠️ ApplicationV2 mocking may be incomplete');
          } else {
            console.log('✅ ApplicationV2 support detected');
          }
        "
        
    - name: Validate TypeScript definitions
      run: |
        echo "Validating TypeScript definitions..."
        node -e "
          const fs = require('fs');
          const content = fs.readFileSync('types/foundry-types.d.ts', 'utf8');
          
          // Essential type definitions that should be present
          const requiredTypes = [
            'declare global',
            'const game: Game',
            'const canvas: Canvas'
          ];
          
          let missing = [];
          for (const type of requiredTypes) {
            if (!content.includes(type)) {
              missing.push(type);
            }
          }
          
          if (missing.length > 0) {
            console.error('❌ Missing essential type definitions:', missing.join(', '));
            process.exit(1);
          } else {
            console.log('✅ All essential type definitions are present');
          }
        "